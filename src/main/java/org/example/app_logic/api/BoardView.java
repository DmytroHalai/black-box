package org.example.app_logic.api;

public interface BoardView {
    /**
     * Повертає символ, який знаходиться у клітинці з координатами {@code (x, y)}.
     * <ul>
     *     <li>{@code x} — горизонтальна координата (0–2);</li>
     *     <li>{@code y} — вертикальна координата (0–2).</li>
     * </ul>
     *
     * <p>Може повертати один із трьох символів:</p>
     * <ul>
     *     <li>{@code 'X'} — клітинка зайнята гравцем X;</li>
     *     <li>{@code 'O'} — клітинка зайнята гравцем O;</li>
     *     <li>{@code ' '} (пробіл) — клітинка порожня.</li>
     * </ul>
     *
     * @param x координата стовпця (0–2)
     * @param y координата рядка (0–2)
     * @return символ, який знаходиться у вказаній позиції
     */
    char at(int x, int y);

    /**
     * Виводить поточний стан дошки у консоль у вигляді сітки 3x3.
     *
     * <p>Використовується для швидкої візуалізації гри під час тестування або відлагодження.
     * Кожна клітинка обрамлена вертикальними лініями та розділена горизонтальними межами.
     * Наприклад:</p>
     *
     * <pre>
     * +---+---+---+
     * | X | O |   |
     * +---+---+---+
     * |   | X |   |
     * +---+---+---+
     * | O |   | X |
     * +---+---+---+
     * </pre>
     *
     * <p>Метод має реалізацію за замовчуванням і може бути викликаний без перевизначення
     * у класах, що реалізують {@code BoardView}.</p>
     */
    default void print() {
        System.out.println("+---+---+---+");
        for (int y = 0; y < 3; y++) {
            for (int x = 0; x < 3; x++) System.out.print("| " + at(x, y) + " ");
            System.out.println("|\n+---+---+---+");
        }
    }
}